#N canvas 148 27 1132 576 10;
#X obj 101 118 cnv 15 300 60 empty empty empty 20 12 0 14 -233017 -66577
0;
#X obj 107 132 nbx 5 14 0 1e+37 0 0 \$2/switch_freq \$2/switch_freq
switch_freq 0 -8 0 10 -4034 -1 -1 0 256;
#X obj 185 132 nbx 5 14 1 1e+37 0 0 \$2/num_channels \$2/num_channels
num_channels 0 -8 0 10 -4034 -1 -1 1 256;
#X text 728 466 Derek Holzer;
#X text 728 515 macumbista@gmail.com;
#X text 120 431 Horizontal;
#X text 120 448 Vertical;
#X text 120 465 Brightness;
#X text 723 254 SWITCHING_FREQUENCY is the "framerate" \, or speed
at which the images switch from one to the other.;
#X text 728 490 Helsinki May 2019;
#X obj 264 132 nbx 5 14 0 100 0 0 \$2/blanking \$2/blanking blanking
0 -8 0 10 -4034 -1 -1 0 256;
#X obj 206 183 / 100;
#X text 512 431 Horizontal;
#X text 512 448 Vertical;
#X text 512 465 Brightness;
#X text 512 485 RGB (used for ILDA);
#X text 453 404 INPUT CHANNELS to [vs-multiplex]:;
#X text 119 484 RGB (used for ILDA);
#X text 723 337 BLANKING turns off the brightness for a short time
(with the amount of time determined by BLANKING number value) each
cycle to elimate the traces between the objects.;
#X obj 205 347 outlet~ B;
#X obj 65 347 outlet~ X;
#X obj 135 347 outlet~ Y;
#X obj 365 347 outlet~ L;
#X obj 435 347 outlet~ R;
#X obj 277 347 outlet~ RGB;
#X text 723 69 [vs-multiplex-gui] allows more than one vector object
to be displayed at the same time by rapidly switching between the two.
;
#X text 724 296 NUM_CHANNELS is the number of [VS-multiplex-gui] channels
to display.;
#X text 62 402 OUTPUT CHANNELS from [vs-multiplex-gui] to connect to
the [dac~] or the [vs-ilda] object;
#X text 726 125 USAGE: [vs-multiplex-gui \$0];
#X text 724 152 You will need one [vs-multiplex] for each object you
wish to display. All of these objects must be given the same first
creation argument. Additionally \, the second creation argument of
[vs-multiplex] is the multiplex channel it occupies.;
#X text 724 223 USAGE: [vs-multiplex \$0 1] \, [vs-multiplex \$0 2]
\, etc;
#X obj 425 111 savestate;
#X obj 472 165 f;
#X obj 504 165 f;
#X obj 522 185 f;
#X obj 502 282 kollabs/ds_reg \$1 \$2/switch_freq;
#X obj 502 302 kollabs/ds_reg \$1 \$2/num_channels;
#X obj 502 322 kollabs/ds_reg \$1 \$2/blanking;
#X obj 107 209 vs-masterclock \$1;
#X obj 107 275 vs-output \$1;
#X obj 227 209 r~ \$1-masterclock;
#X obj 327 131 tgl 15 0 \$2/master \$2/master SendToMaster 0 -8 0 10
-257985 -1 -1 0 1;
#X obj 227 236 *~;
#X text 723 387 SEND TO MASTER allows various [vs-operator-gui] abstractions
to use the switching frequency clock as their master oscillator.;
#X obj 502 342 kollabs/ds_reg \$1 \$2/master;
#X obj 227 273 throw~ \$1-master;
#X obj 107 252 sig~ 1;
#X text 120 522 Audio Right;
#X text 120 503 Audio Left;
#X obj 476 133 t b b b b;
#X obj 476 228 pack 0 0 0 0;
#X obj 425 249 unpack 0 0 0 0;
#X obj 542 205 f;
#X obj 169 46 loadbang;
#X connect 1 0 32 1;
#X connect 1 0 38 0;
#X connect 2 0 33 1;
#X connect 2 0 38 1;
#X connect 10 0 11 0;
#X connect 10 0 34 1;
#X connect 11 0 38 2;
#X connect 31 0 51 0;
#X connect 31 1 49 0;
#X connect 32 0 50 0;
#X connect 33 0 50 1;
#X connect 34 0 50 2;
#X connect 39 0 20 0;
#X connect 39 1 21 0;
#X connect 39 2 19 0;
#X connect 39 3 24 0;
#X connect 39 4 22 0;
#X connect 39 5 23 0;
#X connect 40 0 42 0;
#X connect 41 0 42 1;
#X connect 41 0 52 1;
#X connect 42 0 45 0;
#X connect 46 0 39 0;
#X connect 49 0 32 0;
#X connect 49 1 33 0;
#X connect 49 2 34 0;
#X connect 49 3 52 0;
#X connect 50 0 31 0;
#X connect 51 0 1 0;
#X connect 51 1 2 0;
#X connect 51 2 10 0;
#X connect 51 3 41 0;
#X connect 52 0 50 3;
#X connect 53 0 1 0;
#X connect 53 0 41 0;
#X connect 53 0 10 0;
#X connect 53 0 2 0;
#X coords 0 -1 1 1 302 80 1 100 100;
